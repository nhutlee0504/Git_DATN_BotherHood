// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ImageAccount")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Introduce")
                        .HasColumnType("ntext");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TimeBanned")
                        .HasColumnType("datetime2");

                    b.HasKey("UserName");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("API.Models.AddressDetail", b =>
                {
                    b.Property<int>("IDAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalDetail")
                        .IsRequired()
                        .HasColumnType("Nvarchar(50)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("Nvarchar(50)");

                    b.Property<string>("ProvinceCity")
                        .IsRequired()
                        .HasColumnType("Nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Wardcommune")
                        .IsRequired()
                        .HasColumnType("Nvarchar(50)");

                    b.HasKey("IDAddress");

                    b.HasIndex("UserName");

                    b.ToTable("AddressDetails");
                });

            modelBuilder.Entity("API.Models.Bill", b =>
                {
                    b.Property<int>("IDBill")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateReceipt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UerName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDBill");

                    b.HasIndex("UerName");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("API.Models.BillDetail", b =>
                {
                    b.Property<int>("IDBillDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDBill")
                        .HasColumnType("int");

                    b.Property<int>("IDProduct")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IDBillDetail");

                    b.HasIndex("IDBill");

                    b.HasIndex("IDProduct");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("API.Models.Cart", b =>
                {
                    b.Property<int>("IDCart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDProduct")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDCart");

                    b.HasIndex("IDProduct");

                    b.HasIndex("UserName");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Property<int>("IDCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameCate")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDCategory");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("API.Models.Favorite", b =>
                {
                    b.Property<int>("IDFavorite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDProduct")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDFavorite");

                    b.HasIndex("IDProduct");

                    b.HasIndex("UserName");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("API.Models.ImageProduct", b =>
                {
                    b.Property<int>("IDImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDProduct")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(150)");

                    b.HasKey("IDImage");

                    b.HasIndex("IDProduct");

                    b.ToTable("ImageProducts");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeContent")
                        .HasColumnType("ntext");

                    b.Property<string>("UserReceive")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserSend")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("sendingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserReceive");

                    b.HasIndex("UserSend");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Property<int>("IDProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("IDCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDProduct");

                    b.HasIndex("IDCategory");

                    b.HasIndex("UserName");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("API.Models.Rating", b =>
                {
                    b.Property<int>("IDRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("ntext");

                    b.Property<int>("IDBillDetail")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(150)");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IDRating");

                    b.HasIndex("IDBillDetail")
                        .IsUnique();

                    b.HasIndex("UserName");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("API.Models.AddressDetail", b =>
                {
                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("addressDetails")
                        .HasForeignKey("UserName");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("API.Models.Bill", b =>
                {
                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("bills")
                        .HasForeignKey("UerName");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("API.Models.BillDetail", b =>
                {
                    b.HasOne("API.Models.Bill", "Bill")
                        .WithMany("billDetails")
                        .HasForeignKey("IDBill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("billDetails")
                        .HasForeignKey("IDProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.Cart", b =>
                {
                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("carts")
                        .HasForeignKey("IDProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("carts")
                        .HasForeignKey("UserName");

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.Favorite", b =>
                {
                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("favorites")
                        .HasForeignKey("IDProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("favorites")
                        .HasForeignKey("UserName");

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.ImageProduct", b =>
                {
                    b.HasOne("API.Models.Product", "Product")
                        .WithMany("imageProducts")
                        .HasForeignKey("IDProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.HasOne("API.Models.Account", "AccountReceive")
                        .WithMany("messagesReceive")
                        .HasForeignKey("UserReceive")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Models.Account", "AccountSend")
                        .WithMany("messageSend")
                        .HasForeignKey("UserSend")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountReceive");

                    b.Navigation("AccountSend");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.HasOne("API.Models.Category", "Category")
                        .WithMany("products")
                        .HasForeignKey("IDCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("products")
                        .HasForeignKey("UserName");

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("API.Models.Rating", b =>
                {
                    b.HasOne("API.Models.BillDetail", "BillDetail")
                        .WithOne("Rating")
                        .HasForeignKey("API.Models.Rating", "IDBillDetail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Account", "Account")
                        .WithMany("ratings")
                        .HasForeignKey("UserName");

                    b.Navigation("Account");

                    b.Navigation("BillDetail");
                });

            modelBuilder.Entity("API.Models.Account", b =>
                {
                    b.Navigation("addressDetails");

                    b.Navigation("bills");

                    b.Navigation("carts");

                    b.Navigation("favorites");

                    b.Navigation("messageSend");

                    b.Navigation("messagesReceive");

                    b.Navigation("products");

                    b.Navigation("ratings");
                });

            modelBuilder.Entity("API.Models.Bill", b =>
                {
                    b.Navigation("billDetails");
                });

            modelBuilder.Entity("API.Models.BillDetail", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("API.Models.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("API.Models.Product", b =>
                {
                    b.Navigation("billDetails");

                    b.Navigation("carts");

                    b.Navigation("favorites");

                    b.Navigation("imageProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
