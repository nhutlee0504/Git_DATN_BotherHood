@page "/post"
@using System.ComponentModel.DataAnnotations
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h4>Thông tin sản phẩm</h4>

<div class="form-group">
    <label for="ProductImages">Hình ảnh sản phẩm:</label>
    <div class="row">
        @for (int i = 0; i < 3; i++)
        {
            <div class="col-md-4">
                <div class="image-preview border d-flex align-items-center justify-content-center"
                     @onclick="() => SelectImage(i)" style="height: 200px; overflow: hidden;">
                    @if (selectedFiles.Count > i && selectedFiles[i] != null)
                    {
                        <img src="@selectedFiles[i].DataUrl" class="img-fluid" alt="Hình ảnh sản phẩm"
                             style="max-height: 100%; max-width: 100%; object-fit: cover;" />
                    }
                    else
                    {
                        <span class="placeholder-text">Chưa có hình ảnh</span>
                    }
                </div>
            </div>
        }
    </div>

    <button @onclick="AddImage" class="btn btn-primary mt-2" disabled="@IsAddImageDisabled">
        Chọn hình ảnh
    </button>
    <span>Xem quy định về <a href="#">Cách chụp ảnh và quay sản phẩm</a> </span>
</div>

<div class="form-group">
    <label for="ProductName">Tên sản phẩm:</label>
    <input type="text" @bind="ProductName" class="form-control" placeholder="Nhập tên sản phẩm" id="ProductName" />
</div>

<div class="form-group">
    <label for="ProductType">Loại sản phẩm:</label>
    <input type="text" @bind="ProductType" class="form-control" placeholder="Nhập loại sản phẩm" id="ProductType" />
</div>

<div class="form-group">
    <label for="ProductPrice">Giá sản phẩm:</label>
    <input type="number" @bind="ProductPrice" class="form-control" placeholder="Nhập giá sản phẩm" id="ProductPrice" />
</div>

<div class="form-group">
    <label for="ProductQuantity">Số lượng sản phẩm:</label>
    <input type="number" @bind="ProductQuantity" class="form-control" placeholder="Nhập số lượng sản phẩm" id="ProductQuantity" />
</div>

<div class="text-right">
    <button @onclick="SaveProduct" class="btn btn-success">Đăng bán</button>
</div>

<div class="form-group">
    <label for="ProductDescription">Mô tả sản phẩm chi tiết:</label>
    <textarea class="form-control" id="ProductDescription" rows="4" placeholder="Nhập mô tả chi tiết về sản phẩm..."></textarea>
    <small class="form-text text-muted">
        Gợi ý:
        <ul>
            <li> Chất liệu: 100% cotton, mềm mại và thoáng khí.</li>
            <li> Thiết kế: Cổ áo đính cúc, tay dài có thể gấp lên dễ dàng.</li>
            <li> Màu sắc: Trắng, xanh dương, xám.</li>
            <li> Kích thước: S, M, L, XL.</li>
            <li> Chất lượng: Dệt chắc chắn, không phai màu sau nhiều lần giặt.</li>
        </ul>
    </small>
</div>

@code {
    private List<FileModel> selectedFiles = new() { null, null, null };
    private string ProductName;
    private string ProductType;
    private decimal ProductPrice;
    private int ProductQuantity;
    private string ProductDescription;

    private bool IsAddImageDisabled => selectedFiles.All(file => file != null);

    private async Task AddImage()
    {
        if (IsAddImageDisabled)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Bạn đã chọn đủ 3 hình ảnh.");
            return;
        }

        var files = await JSRuntime.InvokeAsync<List<FileModel>>("selectFile");
        for (int i = 0; i < files.Count && selectedFiles.Count(f => f != null) < 3; i++)
        {
            int index = selectedFiles.FindIndex(f => f == null);
            if (index != -1) selectedFiles[index] = files[i];
        }
    }

    private void SelectImage(int index)
    {
        if (index >= 0 && index < selectedFiles.Count) selectedFiles[index] = null;
    }

    private string UserId = "123"; // ID người dùng tạm thời (lấy từ hệ thống đăng nhập)

    private async Task SaveProduct()
    {
        if (string.IsNullOrWhiteSpace(ProductName) ||
            string.IsNullOrWhiteSpace(ProductType) ||
            ProductPrice <= 0 || ProductQuantity <= 0 ||
            selectedFiles.All(f => f == null))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng điền đầy đủ thông tin và chọn ít nhất 1 hình ảnh.");
            return;
        }

        try
        {
            var formData = new MultipartFormDataContent
        {
            { new StringContent(ProductName), "Name" },
            { new StringContent(ProductType), "Type" },
            { new StringContent(ProductPrice.ToString()), "Price" },
            { new StringContent(ProductQuantity.ToString()), "Quantity" },
            { new StringContent(ProductDescription ?? string.Empty), "Description" },
            { new StringContent(UserId), "UserId" } // Thêm thông tin người dùng
        };

            // Thêm hình ảnh vào formData
            foreach (var file in selectedFiles.Where(f => f != null))
            {
                var imageData = Convert.FromBase64String(file.DataUrl.Split(",")[1]);
                var byteContent = new ByteArrayContent(imageData);
                byteContent.Headers.Add("Content-Type", "image/jpeg");
                formData.Add(byteContent, "Images", "image.jpg");
            }

            var response = await HttpClient.PostAsync("api/product/add", formData);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Đăng sản phẩm thành công!");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Lỗi API: {errorMessage}");
                await JSRuntime.InvokeVoidAsync("alert", $"Lỗi: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi gửi dữ liệu: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Đã xảy ra lỗi khi gửi dữ liệu.");
        }
    }



    public class FileModel
    {
        public string DataUrl { get; set; }
    }
}
