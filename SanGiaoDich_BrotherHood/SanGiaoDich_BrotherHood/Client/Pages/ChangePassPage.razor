@page "/changePass"
@using SanGiaoDich_BrotherHood.Shared.Models
@using SanGiaoDich_BrotherHood.Shared.Dto
@using System.Security.Cryptography
@using System.Text
@inject HttpClient http
@inject IJSRuntime js
@inject NavigationManager navigation

<div class="container">
    <div class="row">
        <div class="col-md-4 offset-4">
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success fs-3">@successMessage</div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger fs-5">@errorMessage</div>
            }
        </div>
    </div>
    <h2 class="d-flex justify-content-center">Đổi mật khẩu</h2>
    <div class="row">
        <div class="col-md-4 offset-4">
            <form @onsubmit="SubmitForm">
                <div class="form-group">
                    <label class="control-label">Mật khẩu cũ</label>
                    <input type="password" class="form-control" @bind="oldPass" />
                    @if (!string.IsNullOrEmpty(errorOldPass))
                    {
                        <div class="text-danger">@errorOldPass</div>
                    }
                </div>
                <div class="form-group mt-3">
                    <label class="control-label">Mật khẩu mới</label>
                    <input type="password" class="form-control" @bind="newPass" />
                    @if (!string.IsNullOrEmpty(errorNewPass))
                    {
                        <div class="text-danger">@errorNewPass</div>
                    }
                </div>
                <div class="form-group mt-3">
                    <label class="control-label">Nhập lại mật khẩu mới</label>
                    <input type="password" class="form-control" @bind="newPass2" />
                    @if (!string.IsNullOrEmpty(errorNewPass2))
                    {
                        <div class="text-danger">@errorNewPass2</div>
                    }
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-dark btn-block" style="border-radius: 20px" type="submit">Xác nhận</button>
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    private InfoAccountDto account;
    private string LoggedInUser;
    private string oldPass;
    private string newPass;
    private string newPass2;
    private string errorOldPass;
    private string errorNewPass;
    private string errorNewPass2;
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        await CheckLogined();
    }

    private async Task CheckLogined()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccount();
        }
        else
        {

        }
    }

    private async Task LoadAccount()
    {
        errorMessage = null;
        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                account = await response.Content.ReadFromJsonAsync<InfoAccountDto>();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                await Task.Delay(2000);
                navigation.NavigateTo("/ThongTinNguoiDung");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra: " + ex.Message;
        }
    }

    private async Task SubmitForm()
    {
        ValidateForm();

        if (!string.IsNullOrEmpty(errorOldPass) || !string.IsNullOrEmpty(errorNewPass) || !string.IsNullOrEmpty(errorNewPass2))
        {
            return;
        }

        if (account.Password != GetHash(oldPass))
        {
            errorOldPass = "Mật khẩu cũ không đúng";
        }
        else if (newPass != newPass2)
        {
            errorNewPass2 = "Mật khẩu xác nhận không khớp";
        }
        else
        {
            try
            {
                var pass = new InfoAccountDto()
                    {
                        Password = newPass2
                    };
                var response = await http.PutAsJsonAsync($"api/User/ChangePassword/{account.UserName}", pass);
                if (response.IsSuccessStatusCode)
                {
                    errorNewPass2 = null;
                    errorNewPass = null;
                    successMessage = "Đổi mật khẩu thành công";
                    await js.InvokeVoidAsync("localStorage.removeItem", "token");
                    StateHasChanged();
                    await Task.Delay(2000);
                    navigation.NavigateTo("/login", forceLoad: true);
                }
                else
                {
                    errorMessage = await response.Content.ReadAsStringAsync();
                    await Task.Delay(5000);
                    errorMessage = null;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                errorMessage = "Đã xảy ra lỗi khi đổi mật khẩu.";
            }
        }
    }

    private void ValidateForm()
    {
        errorOldPass = string.IsNullOrEmpty(oldPass) ? "Vui lòng nhập mật khẩu cũ" : null;
        errorNewPass = string.IsNullOrEmpty(newPass) ? "Vui lòng nhập mật khẩu mới" : null;
        errorNewPass2 = string.IsNullOrEmpty(newPass2) ? "Vui lòng nhập mật khẩu xác nhận" : null;
    }

    private string GetHash(string password)
    {
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(password);
            byte[] hashBytes = sha256.ComputeHash(inputBytes);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hashBytes.Length && i < 16; i++)
            {
                sb.Append(hashBytes[i].ToString("x2"));
            }
            return sb.ToString();
        }
    }
}
